import pexpect
from re import findall
import sys
import textfsm

root_dir = sys.path[0]


def send_command(session, command: str, prompt: str = r'\S+\s*#\s*$', next_catch: str = None) -> str:
    output = ''
    session.sendline(command)
    session.expect(command)
    if next_catch:
        session.expect(next_catch)
    while True:
        match = session.expect(
            [
                prompt,
                "Press <SPACE> to continue or <Q> to quit:",
                pexpect.TIMEOUT
            ]
        )
        output += str(session.before.decode('utf-8')).replace("[42D", '').replace(
            "\x1b[m\x1b[60;D\x1b[K", '')
        # output += page.split('Flags : ')[0].strip()
        if match == 0:
            break
        elif match == 1:
            session.send(" ")
            output += '\n'
        else:
            print("    –û—à–∏–±–∫–∞: timeout")
            break
    return output


def show_mac(telnet_session, interfaces: list, interface_filter: str) -> str:

    intf_to_check = []  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    mac_output = ''  # –í—ã–≤–æ–¥ MAC
    not_uplinks = True if interface_filter == 'only-abonents' else False

    for line in interfaces:
        if (
                (not not_uplinks and bool(findall(interface_filter, line[3])))  # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
                or (not_uplinks and  # –ò–õ–ò –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫—Ä–æ–º–µ:
                    'SVSL' not in line[3].upper() and  # - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "SVSL"
                    'POWER_MONITORING' not in line[3].upper())  # - POWER_MONITORING
                and not ('ready' in line[2].lower() and not line[3])  # - –ø—É—Å—Ç—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å LinkDown
                and 'disable' not in line[1].lower()  # –ò —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º admin up
        ):  # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É
            intf_to_check.append([line[0], line[3]])

    if not intf_to_check:
        if not_uplinks:
            return '–ü–æ—Ä—Ç—ã –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ª–∏–±–æ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å admin down (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ MAC\'–æ–≤ –Ω–µ—Ç)'
        else:
            return f'–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ—Ä—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ "{interface_filter}" ' \
                   f'–ª–∏–±–æ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å admin down (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ MAC\'–æ–≤ –Ω–µ—Ç)'

    for intf in intf_to_check:  # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        separator_str = '‚îÄ' * len(f'–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {intf[0]} ({intf[1]})')
        mac_output += f'\n\n    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {intf[0]} ({intf[1]})\n' \
                      f'    {separator_str}\n'

        mac_output_ = send_command(
            session=telnet_session,
            command=f'show fdb ports {intf[0]}'
        )
        cut = mac_output_.find('Flags : d -')
        mac_output += mac_output_[:cut]

    return mac_output


def show_interfaces(telnet_session) -> list:
    # LINKS
    output_links = send_command(
        session=telnet_session,
        command='show ports information'
    )
    with open(f'{root_dir}/templates/interfaces/extreme_links.template', 'r') as template_file:
        int_des_ = textfsm.TextFSM(template_file)
        result_port_state = int_des_.ParseText(output_links)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    for position, line in enumerate(result_port_state):
        if result_port_state[position][1].startswith('D'):
            result_port_state[position][1] = 'Disable'
        elif result_port_state[position][1].startswith('E'):
            result_port_state[position][1] = 'Enable'
        else:
            result_port_state[position][1] = 'None'

    # DESC
    output_des = send_command(
        session=telnet_session,
        command='show ports description'
    )

    with open(f'{root_dir}/templates/interfaces/extreme_des.template', 'r') as template_file:
        int_des_ = textfsm.TextFSM(template_file)
        result_des = int_des_.ParseText(output_des)  # –ò—â–µ–º desc

    result = [result_port_state[n] + result_des[n] for n in range(len(result_port_state))]
    return result


def show_device_info(telnet_session):
    info = '\n'

    # VERSION
    info += send_command(
        session=telnet_session,
        command='show switch detail'
    )

    info += send_command(
        session=telnet_session,
        command='show version detail'
    )

    info += '           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n' \
            '           ‚îÇ –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ ‚îÇ\n' \
            '           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'

    info += send_command(
        session=telnet_session,
        command='show fans detail'
    )

    # TEMPERATURE
    info += '           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n' \
            '           ‚îÇ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚îÇ\n' \
            '           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
    info += send_command(
        session=telnet_session,
        command='show temperature'
    )

    # POWER
    info += '           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n' \
            '           ‚îÇ –ü–∏—Ç–∞–Ω–∏–µ ‚îÇ\n' \
            '           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
    info += send_command(
        session=telnet_session,
        command='show power'
    )

    info += ' ‚îå                                    ‚îê\n' \
            ' ‚îÇ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÇ\n' \
            ' ‚îî                                    ‚îò\n' \
            '                   ‚ñº\n\n' \
            '           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n' \
            '           ‚îÇ Platform Info ‚îÇ\n' \
            '           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
    # PLATFORM INFORMATION
    info += send_command(
        session=telnet_session,
        command='debug hal show platform platformInfo'
    )
    # SLOTS
    info += '           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n' \
            '           ‚îÇ –°–ª–æ—Ç—ã ‚îÇ\n' \
            '           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
    info += send_command(
        session=telnet_session,
        command='debug hal show platform deviceInfo'
    )
    return info


def show_vlans(telnet_session, interfaces: list):

    def range_to_numbers(ports_string: str) -> list:
        ports_split = ports_string.replace(' ', '').split(',')
        res_ports = []
        for p in ports_split:
            if '-' in p:
                port_range = list(range(int(p.split('-')[0]), int(p.split('-')[1]) + 1))
                for pr in port_range:
                    res_ports.append(int(pr))
            else:
                res_ports.append(int(p))

        return sorted(res_ports)

    output_vlans = send_command(
        session=telnet_session,
        command='show configuration "vlan"',
        next_catch=r'Module vlan configuration\.'
    )

    with open(f'{root_dir}/templates/vlans_templates/extreme.template', 'r') as template_file:
        vlan_templ = textfsm.TextFSM(template_file)
        result_vlans = vlan_templ.ParseText(output_vlans)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ —ç—Ç–æ –∫–æ–ª-–≤–æ –ø–æ—Ä—Ç–æ–≤, –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –±—É–¥—É—Ç –≤–ª–∞–Ω—ã –Ω–∞ –Ω–∏—Ö
    ports_vlan = {num: [] for num in range(1, len(interfaces) + 1)}

    for vlan in result_vlans:
        for port in range_to_numbers(vlan[1]):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—ã
            ports_vlan[port].append(vlan[0])
    interfaces_vlan = []  # –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –≤–ª–∞–Ω—ã)

    for line in interfaces:
        max_letters_in_string = 20  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Å—Ç–æ–ª–±—Ü–µ VLAN's
        vlans_compact_str = ''  # –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º VLAN–æ–≤ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
        line_str = ''
        for part in ports_vlan[int(line[0])]:
            if len(line_str) + len(part) <= max_letters_in_string:
                line_str += f'{part},'
            else:
                vlans_compact_str += f'{line_str}\n'
                line_str = f'{part},'
        else:
            vlans_compact_str += line_str[:-1]
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ø–æ—Ä—Ç, —Å—Ç–∞—Ç—É—Å, –æ–ø–∏—Å–∞–Ω–∏–µ + –≤–ª–∞–Ω—ã
        interfaces_vlan.append(line + [vlans_compact_str])

    # –û–ø–∏—Å–∞–Ω–∏–µ VLAN'–æ–≤
    with open(f'{root_dir}/templates/vlans_templates/extreme_vlan_info.template', 'r') as template_file:
        vlan_templ = textfsm.TextFSM(template_file)
        vlans_info = vlan_templ.ParseText(output_vlans)
    vlans_info = sorted(vlans_info, key=lambda line: int(line[0]))  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é vlan
    return vlans_info, interfaces_vlan
