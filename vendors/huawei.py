import pexpect
from re import findall, sub
import sys
import textfsm
from func.intf_view import interface_normal_view

root_dir = sys.path[0]


def show_mac_huawei_1(telnet_session, interfaces: list, interface_filter: str) -> str:
    intf_to_check = []  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    mac_output = ''  # –í—ã–≤–æ–¥ MAC
    not_uplinks = True if interface_filter == 'only-abonents' else False

    for line in interfaces:
        if (
                (not not_uplinks and bool(findall(interface_filter, line[3])))  # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
                or (not_uplinks and  # –ò–õ–ò –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫—Ä–æ–º–µ:
                    'SVSL' not in line[2].upper() and  # - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "SVSL"
                    'HUAWEI, QUIDWAY' not in line[2].upper() and  # - "–∑–∞–≥–ª—É—à–µ–∫" —Ç–∏–ø–∞ "HUAWEI, Quidway Series
                    'POWER_MONITORING' not in line[2].upper())  # - POWER_MONITORING
                and 'down' not in line[1].lower()  # –ò —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º admin up
        ):  # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É
            intf_to_check.append([line[0], line[2]])

    if not intf_to_check:
        if not_uplinks:
            return '–ü–æ—Ä—Ç—ã –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ª–∏–±–æ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å admin down (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ MAC\'–æ–≤ –Ω–µ—Ç)'
        else:
            return f'–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ—Ä—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ "{interface_filter}" ' \
                   f'–ª–∏–±–æ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å admin down (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ MAC\'–æ–≤ –Ω–µ—Ç)'

    for intf in intf_to_check:  # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        telnet_session.sendline(f'display mac-address {interface_normal_view(intf[0])}')
        telnet_session.expect(f'{interface_normal_view(intf[0])}')
        mac_output += f'\n    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {interface_normal_view(intf[1])}\n'
        while True:
            match = telnet_session.expect([r'<', "  ---- More ----", pexpect.TIMEOUT])
            page = str(telnet_session.before.decode('utf-8'))
            mac_output += page.strip()
            if match == 0:
                break
            elif match == 1:
                telnet_session.send(" ")
                mac_output += '\n'
            else:
                print("    –û—à–∏–±–∫–∞: timeout")
                break
        mac_output += '\n'
    return mac_output


def show_mac_huawei_2(telnet_session, interfaces: list, interface_filter: str) -> str:
    intf_to_check = []  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    mac_output = ''  # –í—ã–≤–æ–¥ MAC
    # –í—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫—Ä–æ–º–µ –∞–ø–ª–∏–Ω–∫–æ–≤
    not_uplinks = True if interface_filter == '--only-abonents' else False

    for line in interfaces:
        if (
                (not not_uplinks and bool(findall(interface_filter, line[2])))  # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
                or (not_uplinks and                          # –ò–õ–ò –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫—Ä–æ–º–µ:
                    'SVSL' not in line[2].upper() and             # - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "SVSL"
                    'HUAWEI, QUIDWAY' not in line[2].upper() and  # - "–∑–∞–≥–ª—É—à–µ–∫" —Ç–∏–ø–∞ "HUAWEI, Quidway Series
                    'POWER_MONITORING' not in line[2].upper())    # - POWER_MONITORING
                and 'down' not in line[1].lower()            # –ò —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º admin up
        ):  # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É
            intf_to_check.append([line[0], line[2]])

    if not intf_to_check:
        if not_uplinks:
            return '–ü–æ—Ä—Ç—ã –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ª–∏–±–æ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å admin down (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ MAC\'–æ–≤ –Ω–µ—Ç)'
        else:
            return f'–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ—Ä—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ "{interface_filter}" ' \
                   f'–ª–∏–±–æ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å admin down (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ MAC\'–æ–≤ –Ω–µ—Ç)'

    for intf in intf_to_check:  # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        telnet_session.sendline(f'display mac-address interface {interface_normal_view(intf[0])}')
        telnet_session.expect(f'{interface_normal_view(intf[0])}')
        separator_str = '‚îÄ' * len(f'–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {interface_normal_view(intf[1])}')
        mac_output += f'\n    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {interface_normal_view(intf[1])}\n    {separator_str}\n'
        while True:
            match = telnet_session.expect(['  ---  ', "  ---- More ----", pexpect.TIMEOUT])
            page = str(telnet_session.before.decode('utf-8'))
            mac_output += page.strip()
            if match == 0:
                break
            elif match == 1:
                telnet_session.send(" ")
                mac_output += '\n'
            else:
                print("    –û—à–∏–±–∫–∞: timeout")
                break
        mac_output += '\n\n'
    return mac_output


def show_interfaces(telnet_session, huawei_type: str = 'huawei-1', privileged: bool = False) -> tuple:
    """
        –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–∞ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–µ —Ç–∏–ø–∞ Huawei
    :param telnet_session:  –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
    :param huawei_type:     —Ç–∏–ø huawei: huawei-1, huawei-2 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é huawei-1)
    :param privileged:      –ø—Ä–∏–≤–µ–ª–∏–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ']' –∏–ª–∏ –Ω–µ—Ç '>' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç)
    :return:                –ö–æ—Ä—Ç–µ–∂ (—Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, —Ç–∏–ø huawei)
    """
    template_type = ''
    output = ''

    if '1' in huawei_type:  # with '*down'
        telnet_session.sendline("display interface description")
        telnet_session.expect('display interface description')

    elif '2' in huawei_type:
        telnet_session.sendline('dis brief int')
        template_type = '2'

    while True:
        match = telnet_session.expect(['Too many parameters|Wrong parameter', ']', "  ---- More ----",
                                      "Unrecognized command", ">", pexpect.TIMEOUT])
        output += str(telnet_session.before.decode('utf-8')).replace(
            "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
        if match == 4 or match == 1:
            break
        elif match == 2:
            telnet_session.send(" ")
            output += '\n\n'
        elif match == 0 or match == 3:
            # –ï—Å–ª–∏ –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if not privileged:
                telnet_session.expect('>')
                telnet_session.sendline('super')
                if not telnet_session.expect(['[Pp]ass', '<\S+>']):
                    telnet_session.sendline('sevaccess')
                    telnet_session.expect('>')
            telnet_session.sendline('dis brief int')
            telnet_session.expect('dis brief int')
            output = ''
            huawei_type = 'huawei-2'
            template_type = '2'
        else:
            print("    –û—à–∏–±–∫–∞: timeout")
            break

    with open(f'{root_dir}/templates/int_des_huawei{template_type}.template', 'r') as template_file:
        int_des_ = textfsm.TextFSM(template_file)
        result = int_des_.ParseText(output)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    return [line for line in result if not line[0].startswith('NULL') and not line[0].startswith('V')], huawei_type


def show_device_info(telnet_session):
    version = '\n'
    huawei_type = 'huawei-1'
    telnet_session.sendline('display cpu')
    v = telnet_session.expect(['<', 'Unrecognized command', '  ---- More ----'])
    if v == 1:
        huawei_type = 'huawei-2'
        telnet_session.sendline('super')
        telnet_session.expect('[Pp]assword:')
        telnet_session.sendline('sevaccess')
        telnet_session.expect('>')
    elif v == 2:
        telnet_session.sendline('q')

    # VERSION
    telnet_session.sendline('display version')
    telnet_session.expect('display version')
    telnet_session.expect('\S+>')
    version += str(telnet_session.before.decode('utf-8')).replace(
        "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
    version += '\n\n\n'

    if huawei_type == 'huawei-2':
        # CPU
        telnet_session.sendline('display cpu')
        telnet_session.expect('display cpu')
        telnet_session.expect('<')
        version += '   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
        version += '   ‚îÇ –ó–ê–ì–†–£–ó–ö–ê CPU ‚îÇ\n'
        version += '   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
        version += str(telnet_session.before.decode('utf-8')).replace(
            "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
        version += '\n\n\n'

        # MANUINFO
        telnet_session.sendline('display device manuinfo')
        telnet_session.expect('display device manuinfo')
        telnet_session.expect('<')
        version += '   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
        version += '   ‚îÇ MAC –∞–¥—Ä–µ—Å, –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä ‚îÇ\n'
        version += '   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
        version += str(telnet_session.before.decode('utf-8')).replace(
            "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
        version += '\n\n\n'

        # DHCP SNOOPING
        telnet_session.sendline('display dhcp-snooping')
        telnet_session.expect('display dhcp-snooping')
        version += '   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
        version += '   ‚îÇ DHCP SNOOPING ‚îÇ\n'
        version += '   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
        dhcp_output = ''
        while True:
            match = telnet_session.expect(['<\S+>', "  ---- More ----", pexpect.TIMEOUT])
            dhcp_output += str(telnet_session.before.decode('utf-8')).replace(
                "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
            if match == 1:
                telnet_session.sendline(' ')
                dhcp_output += '\n '
            else:
                break
        version += dhcp_output
        version += '\n\n\n'

    if huawei_type == 'huawei-1':
        # MAC
        telnet_session.sendline('display bridge mac-address')
        telnet_session.expect('display bridge mac-address')
        telnet_session.expect('<')
        version += '   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
        version += '   ‚îÇ MAC –∞–¥—Ä–µ—Å ‚îÇ\n'
        version += '   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
        version += str(telnet_session.before.decode('utf-8')).replace(
            "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
        version += '\n\n\n'

        # TEMPERATURE
        telnet_session.sendline('display environment')
        telnet_session.expect('display environment')
        telnet_session.expect('<')
        version += '   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
        version += '   ‚îÇ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚îÇ\n'
        version += '   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
        version += str(telnet_session.before.decode('utf-8')).replace(
            "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
        version += '\n\n\n'

        # FANS
        telnet_session.sendline('display fan verbose')
        telnet_session.expect('display fan verbose')
        telnet_session.expect('<')
        version += '   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
        version += '   ‚îÇ –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ ‚îÇ\n'
        version += '   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
        version += str(telnet_session.before.decode('utf-8')).replace(
            "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
        version += '\n\n\n'

        # E-LABEL
        telnet_session.sendline('display elabel')
        telnet_session.expect('display elabel')
        version += '\n' \
                   ' ‚îå                                    ‚îê\n' \
                   ' ‚îÇ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÇ\n' \
                   ' ‚îî                                    ‚îò\n' \
                   '                   ‚ñº\n\n'
        while True:
            m = telnet_session.expect(['  ---- More ----', '<\S+>', pexpect.TIMEOUT])
            version += str(telnet_session.before.decode('utf-8')).replace(
            "\x1b[42D                                          \x1b[42D", '').replace("[42D", '').strip()
            if m == 0:
                telnet_session.sendline(' ')
                version += '\n'
            else:
                break
        version += '\n\n\n'
    return version


def show_cable_diagnostic(telnet_session):
    cable_diagnostic = ''
    telnet_session.sendline('system-view')
    v = telnet_session.expect(['\S+]$', 'Unrecognized command'])
    if v == 1:
        huawei_type = 'huawei-2'
        telnet_session.sendline('super')
        telnet_session.expect('[Pp]assword:')
        telnet_session.sendline('sevaccess')
        telnet_session.expect('>')
        telnet_session.sendline('system-view')
        telnet_session.expect('\S+]$')
    else:
        huawei_type = 'huawei-1'

    if huawei_type == 'huawei-1':
        # CABLE DIAGNOSTIC
        cable_diagnostic = '''
            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
            ‚îÇ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–±–µ–ª–µ–π ‚îÇ
            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

    Pair A/B/C/D   –ß–µ—Ç—ã—Ä–µ –ø–∞—Ä—ã –≤ —Å–µ—Ç–µ–≤–æ–º –∫–∞–±–µ–ª–µ

    Pair length    –î–ª–∏–Ω–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∫–∞–±–µ–ª—è:
                    ‚îÄ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ —Ç–æ—á–∫–æ–π —Ä–∞–∑–ª–æ–º–∞ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏;
                    ‚îÄ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è, –∫–æ–≥–¥–∞ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

    Pair state     –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∫–∞–±–µ–ª—è:
                      Ok: —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–∞—Ä–∞ —Ü–µ–ø–µ–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
                      Open: —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–∞—Ä–∞ —Ü–µ–ø–µ–π –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
                      Short: —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–∞—Ä—ã —Ü–µ–ø–µ–π.
                      Crosstalk: —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –ø–∞—Ä—ã —Ü–µ–ø–µ–π –º–µ—à–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É.
                      Unknown: —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–∞—Ä–∞ —Ü–µ–ø–µ–π –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å.


        '''
        interfaces_list, _ = show_interfaces(telnet_session=telnet_session)
        telnet_session.sendline('system-view')
        telnet_session.expect('\S+]$')
        for intf in interfaces_list:
            if 'NULL' not in intf[0] and 'Vlan' not in intf[0]:
                try:
                    separator_str = '‚îÄ' * len(f'–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {intf[0]} ({intf[2]}) port status: {intf[1]}')
                    cable_diagnostic += f'    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {intf[0]} ({intf[2]}) port status: {intf[1]}\n' \
                                        f'    {separator_str}\n'
                    telnet_session.sendline(f'interface {interface_normal_view(intf[0])}')
                    telnet_session.expect(f'\S+]$')
                    telnet_session.sendline('virtual-cable-test')
                    if telnet_session.expect(['continue \[Y/N\]', 'Error:']):
                        cable_diagnostic += '–î–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n\n'
                        telnet_session.sendline('quit')
                        telnet_session.expect('\S+]$')
                        continue
                    telnet_session.sendline('Y')
                    telnet_session.expect('\?Y\W*')
                    telnet_session.expect('\[\S+\]$')
                    cable_diagnostic += str(telnet_session.before.decode('utf-8'))
                    cable_diagnostic += '\n'
                    telnet_session.sendline('quit')
                    telnet_session.expect(f'\S+]$')
                except pexpect.TIMEOUT:
                    break

    if huawei_type == 'huawei-2':
        # CABLE DIAGNOSTIC
        cable_diagnostic = '''
                ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                ‚îÇ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–±–µ–ª–µ–π ‚îÇ
                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò


'''
        interfaces_list, _ = show_interfaces(telnet_session=telnet_session,
                                             huawei_type='huawei-2',
                                             privileged=True)
        for intf in interfaces_list:
            if 'NULL' not in intf[0] and 'Vlan' not in intf[0] and not 'SVSL' in intf[2]:
                try:
                    separator_str = '‚îÄ' * len(f'–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {intf[0]} ({intf[2]}) port status: {intf[1]}')
                    cable_diagnostic += f'    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {intf[0]} ({intf[2]}) port status: {intf[1]}\n' \
                                        f'    {separator_str}\n'
                    telnet_session.sendline(f'interface {interface_normal_view(intf[0])}')
                    telnet_session.expect(f'\S+]$')
                    telnet_session.sendline('virtual-cable-test')
                    telnet_session.expect('virtual-cable-test\W+')
                    telnet_session.expect('\[\S+\d\]$')
                    cable_diagnostic += str(telnet_session.before.decode('utf-8'))
                    cable_diagnostic += '\n'
                    telnet_session.sendline('quit')
                    telnet_session.expect(f'\S+]$')

                except pexpect.TIMEOUT:
                    break
    return cable_diagnostic


def show_vlans(telnet_session, interfaces, device_type: str = 'huawei-1') -> tuple:
    result = []
    for line in interfaces:
        if not line[0].startswith('V') and not line[0].startswith('NU') and not line[0].startswith('A'):
            telnet_session.sendline(f"display current-configuration interface {interface_normal_view(line[0])}")
            # telnet_session.expect(f"interface {interface_normal_view(line[0])}")
            output = ''
            while True:
                match = telnet_session.expect([r'>', "  ---- More ----", pexpect.TIMEOUT])
                page = str(telnet_session.before.decode('utf-8'))
                output += page.strip()
                if match == 0:
                    break
                elif match == 1:
                    telnet_session.send(" ")
                    output += '\n'
                else:
                    print("    –û—à–∏–±–∫–∞: timeout")
                    break
            vlans_group = sub('(?<=undo).+vlan (.+)', '', output)   # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ—á–∫–∏, –≥–¥–µ –µ—Å—Ç—å "undo"
            vlans_group = list(set(findall(r'vlan (.+)', vlans_group)))   # –ò—â–µ–º —Å—Ç—Ä–æ—á–∫–∏ –≤–ª–∞–Ω–æ–≤, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            switchport_mode = list(set(findall(r'port (hybrid|trunk|access)', output)))  # switchport mode
            max_letters_in_string = 35  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Å—Ç–æ–ª–±—Ü–µ VLAN's
            vlans_compact_str = ''      # –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º VLAN–æ–≤ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
            line_str = ''
            for part in ','.join(switchport_mode + vlans_group).split(','):
                if len(line_str) + len(part) <= max_letters_in_string:
                    line_str += f'{part},'
                else:
                    vlans_compact_str += f'{line_str}\n'
                    line_str = f'{part},'
            else:
                vlans_compact_str += line_str[:-1]
            # print(line + [vlans_compact_str])
            result.append(line + [vlans_compact_str])

    if device_type == 'huawei-1':
        telnet_session.sendline(f"display vlan")
        telnet_session.expect(r"VID\s+Status\s+Property")
    else:
        telnet_session.sendline(f"display vlan all")
        telnet_session.expect(f"display vlan all")

    vlans_info = ''
    while True:
        match = telnet_session.expect([r'>', "  ---- More ----", pexpect.TIMEOUT])
        page = str(telnet_session.before.decode('utf-8'))
        vlans_info += page.strip()
        if match == 0:
            break
        elif match == 1:
            telnet_session.send(" ")
            vlans_info += '\n'
        else:
            print("    –û—à–∏–±–∫–∞: timeout")
            break

    with open(f'{root_dir}/templates/vlans_templates/{device_type}_vlan_info.template', 'r') as template_file:
        vlans_info_template = textfsm.TextFSM(template_file)
        vlans_info_table = vlans_info_template.ParseText(vlans_info)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

    return vlans_info_table, result
