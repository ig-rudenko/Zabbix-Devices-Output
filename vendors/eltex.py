import pexpect
from re import findall, sub
import os
import sys
import textfsm
from func.intf_view import interface_normal_view

root_dir = os.path.join(os.getcwd(), os.path.split(sys.argv[0])[0])


def show_interfaces(telnet_session) -> str:
    telnet_session.sendline("show int des")
    output = ''
    while True:
        match = telnet_session.expect([r'# ', "More: <space>", pexpect.TIMEOUT])
        page = str(telnet_session.before.decode('utf-8')).replace("[42D", '').replace(
            "        ", '')
        output += page.strip()
        if 'Ch       Port Mode (VLAN)' in output:
            telnet_session.sendline('q')
            telnet_session.expect('#')
            break
        if match == 0:
            break
        elif match == 1:
            telnet_session.send(" ")
        else:
            print("    –û—à–∏–±–∫–∞: timeout")
            break
    return output


def show_mac_esr_12vf(telnet_session) -> str:
    # –î–ª—è Eltex ESR-12VF –≤—ã–≤–æ–¥–∏–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É MAC –∞–¥—Ä–µ—Å–æ–≤
    mac_output = ''
    telnet_session.sendline(f'show mac address-table ')
    telnet_session.expect('# ')
    m_output = sub('.+\nVID', 'VID', str(telnet_session.before.decode('utf-8')))
    mac_output += f"\n{m_output}"
    return mac_output


def show_mac_mes(telnet_session, output: str, interface_filter: str) -> str:
    intf_to_check = []  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    mac_output = ''  # –í—ã–≤–æ–¥ MAC
    not_uplinks = True if interface_filter == '--only-abonents' else False

    with open(f'{root_dir}/templates/int_des_eltex.template', 'r') as template_file:
        int_des_ = textfsm.TextFSM(template_file)
        result = int_des_.ParseText(output)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

    for line in result:
        if (
                (not not_uplinks and bool(findall(interface_filter, line[3])))  # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
                or (not_uplinks and  # –ò–õ–ò –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫—Ä–æ–º–µ:
                    'SVSL' not in line[3].upper() and  # - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "SVSL"
                    'POWER_MONITORING' not in line[3].upper())  # - POWER_MONITORING
                and not ('down' in line[2].lower() and not line[3])  # - –ø—É—Å—Ç—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å LinkDown
                and 'down' not in line[1].lower()  # –ò —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º admin up
        ):  # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É
            intf_to_check.append([line[0], line[3]])

    if not intf_to_check:
        if not_uplinks:
            return '–ü–æ—Ä—Ç—ã –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ª–∏–±–æ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å admin down (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ MAC\'–æ–≤ –Ω–µ—Ç)'
        else:
            return f'–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ—Ä—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ "{interface_filter}" ' \
                   f'–ª–∏–±–æ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å admin down (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ MAC\'–æ–≤ –Ω–µ—Ç)'

    for intf in intf_to_check:  # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        telnet_session.sendline(f'show mac address-table interface {interface_normal_view(intf[0])}')
        separator_str = '‚îÄ' * len(f'–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {intf[1]}')
        mac_output += f'\n    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {intf[1]}\n    {separator_str}\n'
        telnet_session.expect(r'Aging time is \d+ \S+')

        while True:
            match = telnet_session.expect([r'#$', "More: <space>", pexpect.TIMEOUT])
            page = str(telnet_session.before.decode('utf-8')).replace("[42D", '').replace(
                "        ", '').replace('[0m', '')
            mac_output += f"    {page.strip()}"
            if match == 0:
                break
            elif match == 1:
                telnet_session.expect('<return>')
                telnet_session.send(" ")
            else:
                print("    –û—à–∏–±–∫–∞: timeout")
                break
        mac_output = sub('SVSL.+', '', mac_output)
        mac_output = sub(r'(?<=\d)(?=\S\S:\S\S:\S\S:\S\S:\S\S:\S\S)', r'     ', mac_output)
        mac_output = sub(r'Vlan\s+Mac\s+Address\s+Port\s+Type',
                         'Vlan          Mac_Address         Port       Type',
                         mac_output)
        mac_output += '\n'
    return mac_output


def show_device_info(telnet_session):
    info = ''
    telnet_session.sendline('show system')
    telnet_session.expect('show system')
    telnet_session.expect('\W+\S+#')
    info += telnet_session.before.decode('utf-8')
    info += '\n\n'

    # CPU
    telnet_session.sendline('show cpu utilization')
    telnet_session.expect('show cpu utilization')
    telnet_session.expect('\S+#')
    info += '   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
    info += '   ‚îÇ –ó–ê–ì–†–£–ó–ö–ê CPU ‚îÇ\n'
    info += '   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
    info += telnet_session.before.decode('utf-8')
    info += '\n\n'

    # SNMP
    telnet_session.sendline('show snmp')
    telnet_session.expect('show snmp\W+')
    telnet_session.expect('\W+\S+#$')
    info += '   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n'
    info += '   ‚îÇ SNMP ‚îÇ\n'
    info += '   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'
    info += telnet_session.before.decode('utf-8')
    info += '\n\n'
    return info